---
interface Props {
    event_classification: string;
    event_version: string;
}

const { event_classification, event_version } = Astro.props;
---

<div class="flex flex-col gap-y-4 mx-4 sm:mx-0 items-center">
    <div id="gallery">
        <div
            id="image-area"
            class="grid grid-cols-2 gap-2 md:grid-cols-3 md:gap-x-2 sm:max-w-lg md:max-w-xl items-center"
        >
            <!-- Dynamically generated by JS -->
            <button
                id="mobile-view-more"
                class="gallery-more sm:hidden rounded-lg mx-auto py-2 px-2 font-bold text-l dark:text-gray-200 shadow-md dark:shadow-black/25 border-solid border-2 border-amber-400 dark:border-amber-500 p-2 text-center hover:scale-105 transform transition-transform"
            >
                See more photos
            </button>
        </div>
    </div>

    <button
        id="desktop-view-more"
        class="gallery-more hidden sm:block rounded-lg mx-auto py-2 px-2 font-bold text-l dark:text-gray-200 shadow-md dark:shadow-black/25 border-solid border-2 border-amber-400 dark:border-amber-500 p-2 text-center hover:scale-105 transform transition-transform"
    >
        See more photos
    </button>
</div>

<style>
    .gallery img {
        max-width: none;
        object-fit: contain;
    }
</style>

<script is:inline define:vars={{ event_classification, event_version }}>
    const imageArea = document.getElementById("image-area");
    const mobileViewMoreBtn = document.getElementById("mobile-view-more");
    const desktopViewMoreBtn = document.getElementById("desktop-view-more");

    const r2_base = "https://event-assets.purduehackers.com/images";
    const event_base = `${r2_base}/${event_classification}/${event_version}`;
    // Check if image manifest exists
    const manifest_url = `${event_base}/index.json`;

    const checkManifest = async () => {
        const res = await fetch(manifest_url, {
            method: "HEAD",
        });

        if (res.status === 200) {
            return true;
        }
        return false;
    };

    const fixViewMoreBtns = (count) => {
        if (count > 3) {
            const moreText = `See ${count - 3} more photos`;
            mobileViewMoreBtn.innerText = moreText;
            desktopViewMoreBtn.innerText = moreText;
        } else {
            mobileViewMoreBtn.remove();
            desktopViewMoreBtn.remove();
        }
    };

    const populateImages = async () => {
        if (await checkManifest()) {
            const res = await fetch(manifest_url);
            const manifest = await res.json();

            const image_urls = manifest["images"].map((image) => {
                return `${event_base}/${image.filename}`;
            });

            const image_count = image_urls.length;

            for (let i = 0; i < image_count; i++) {
                const isHidden = i >= 3;
                const img_url = image_urls[i];

                const img_wrapper = document.createElement("div");
                img_wrapper.className = isHidden
                    ? "absolute top-0 left-0 hidden hover:scale-[1.03] transition transform"
                    : "flex flex-col mx-auto hover:scale-[1.03] transition transform";

                const img_link = document.createElement("a");
                img_link.href = img_url;
                img_link.target = "_blank";
                img_link.dataset.cropped = "true";

                const img = document.createElement("img");
                img.src = img_url;
                img.className = "rounded-lg";

                img_link.appendChild(img);
                img_wrapper.appendChild(img_link);
                imageArea.insertBefore(img_wrapper, mobileViewMoreBtn);
            }

            fixViewMoreBtns(image_count);
        } else {
            fixViewMoreBtns(0);
        }
    };

    populateImages().catch(() => {
        // Image-fetching failed, hide view more buttons
        fixViewMoreBtns(0);
    });
</script>

<script>
    import PhotoSwipeLightbox from "photoswipe/lightbox";
    import "photoswipe/style.css";

    const lightbox = new PhotoSwipeLightbox({
        gallery: "#gallery",
        children: "a",
        showHideAnimationType: "fade",
        pswpModule: () => import("photoswipe"),
    });

    lightbox.init();

    document.querySelectorAll(".gallery-more").forEach((btn) => {
        btn.addEventListener("click", (_e) => lightbox.loadAndOpen(3));
    });
</script>
